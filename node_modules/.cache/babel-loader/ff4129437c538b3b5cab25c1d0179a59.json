{"ast":null,"code":"var _jsxFileName = \"/Users/feventsegay/Desktop/mod-5/frontend-school-finder/src/components/mapContainer.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\nimport Details from './details';\nimport Button from 'react-bootstrap/Button';\n\nclass MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => {\n      console.log(props);\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: !this.state.showingInfoWindow\n      });\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.displayMarkers = () => {\n      let filteredSchools = this.state.schools.filter(school => school.zip_code.includes(this.props.searchTerm) && school.grade.includes(this.props.filterTerm));\n\n      if (filteredSchools) {\n        return filteredSchools.map((school, index) => {\n          return React.createElement(Marker, {\n            key: index,\n            id: school.id,\n            position: {\n              lat: school.latitude,\n              lng: school.longitude\n            },\n            onClick: this.onMarkerClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          });\n        });\n      } else {\n        let allschools = this.state.schools.map(school => school.includes(this.props.allGrades));\n        console.log(this.props.allGrades);\n        return allschools.map((school, index) => {\n          return React.createElement(Marker, {\n            key: index,\n            id: school.id,\n            position: {\n              lat: school.latitude,\n              lng: school.longitude\n            },\n            onClick: this.onMarkerClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          });\n        });\n      }\n    };\n\n    this.addToFavorites = school => {\n      fetch(\"http://localhost:3000/addFavorites\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \".concat(localStorage.getItem('token'))\n        },\n        body: JSON.stringify({\n          user_id: localStorage.getItem('user'),\n          school_id: school.id,\n          has_applied: false\n        })\n      }).then(res => res.json()).then(result => {\n        console.log(result);\n      });\n    };\n\n    this.state = {\n      schools: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n  }\n\n  onInfoWindowOpen(props, e, selectedPlace) {\n    const button = React.createElement(Button, {\n      variant: \"outline-success\",\n      size: \"lg\",\n      onClick: () => this.addToFavorites(selectedPlace),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Add To Favorites\");\n    ReactDOM.render(React.Children.only(button), document.getElementById(\"i\"));\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000/schools', {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        schools: data\n      });\n    });\n  }\n\n  render() {\n    let selectedPlace = this.state.schools.find(school => school.id === this.state.selectedPlace.id) || null || {};\n    console.log('mapContainer loaded');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 12,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      initialCenter: {\n        lat: 29.731589,\n        lng: -95.310856\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.displayMarkers(), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      onOpen: e => {\n        this.onInfoWindowOpen(this.props, e, selectedPlace);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Details, {\n      school: selectedPlace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"i\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCGkLGCv3BgUFVYOfNBk5oBmvH6ou-wU8w'\n})(MapContainer);","map":{"version":3,"sources":["/Users/feventsegay/Desktop/mod-5/frontend-school-finder/src/components/mapContainer.js"],"names":["React","ReactDOM","Map","GoogleApiWrapper","Marker","InfoWindow","Details","Button","MapContainer","Component","constructor","props","onMarkerClick","marker","e","console","log","setState","selectedPlace","activeMarker","showingInfoWindow","state","onClose","displayMarkers","filteredSchools","schools","filter","school","zip_code","includes","searchTerm","grade","filterTerm","map","index","id","lat","latitude","lng","longitude","allschools","allGrades","addToFavorites","fetch","method","headers","localStorage","getItem","body","JSON","stringify","user_id","school_id","has_applied","then","res","json","result","onInfoWindowOpen","button","render","Children","only","document","getElementById","componentDidMount","data","find","google","width","height","apiKey"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Map, GoogleApiWrapper, Marker,InfoWindow} from 'google-maps-react'\nimport Details from './details'\nimport Button from 'react-bootstrap/Button'\n\n\n\n class MapContainer extends React.Component {\n\n    constructor (props){\n        super(props)\n        this.state = {\n            schools: [],\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {}\n        }\n    }\n\n\n    onMarkerClick = (props, marker, e) => {\n        console.log(props)\n        this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: !this.state.showingInfoWindow\n        })\n        \n    }\n\n    onInfoWindowOpen(props, e, selectedPlace) {\n        const button = (\n        <Button\n            variant=\"outline-success\"\n            size = 'lg'\n            onClick={()=>this.addToFavorites(selectedPlace)}\n        >Add To Favorites\n        </Button>\n        )\n        ReactDOM.render(\n        React.Children.only(button),\n        document.getElementById(\"i\")\n        )\n    }\n\n    onClose = props => {\n        if (this.state.showingInfoWindow) {\n          this.setState({\n            showingInfoWindow: false,\n            activeMarker: null\n          })\n        }\n    }\n\n\n    \n    componentDidMount(){\n        fetch('http://localhost:3000/schools', {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res=>res.json())\n          .then(data=>{\n            this.setState({\n                schools: data\n            })\n        })\n        \n    }\n\n    \n    displayMarkers = () => {\n        let filteredSchools = this.state.schools.filter( school => school.zip_code.includes(this.props.searchTerm) && school.grade.includes(this.props.filterTerm))\n        if(filteredSchools){\n            return filteredSchools.map((school, index) => {\n                return < Marker key={index} id={school.id} position={{\n                lat: school.latitude,\n                lng: school.longitude,\n                }}\n                onClick = {this.onMarkerClick}  \n                />\n            })\n        }\n\n        else{\n            let allschools= this.state.schools.map(school =>school.includes(this.props.allGrades))\n            console.log(this.props.allGrades)\n            return allschools.map((school, index) => {\n                return < Marker key={index} id={school.id} position={{\n                lat: school.latitude,\n                lng: school.longitude,\n                }}\n                onClick = {this.onMarkerClick} \n\n                />\n            })\n\n        }\n    }\n\n\n    addToFavorites = (school) => {\n        \n        fetch(`http://localhost:3000/addFavorites`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('token')}` \n            },\n            body: JSON.stringify({\n                user_id: localStorage.getItem('user'),\n                school_id: school.id,\n                has_applied:false\n\n                \n            })\n        })\n        .then(res =>res.json())\n        .then(result => {console.log(result)})\n      \n    }\n    \n\n    render() {\n        \n    let selectedPlace = this.state.schools.find(school => school.id === this.state.selectedPlace.id) || null || {}\n    console.log('mapContainer loaded')\n\n        return (\n            <div>\n                <Map \n                    google={this.props.google}\n                    zoom={12}\n                    style={{width: '100%', height: '100%',}}\n                    initialCenter={{ lat: 29.731589, lng: -95.310856}}\n                >\n                    \n                {this.displayMarkers()}\n\n                <InfoWindow \n                    marker={this.state.activeMarker}\n                    visible={this.state.showingInfoWindow}\n                    onClose={this.onClose}\n                    onOpen={e => {\n                    this.onInfoWindowOpen(this.props, e, selectedPlace);\n                    }}\n                > \n                   <Details school = {selectedPlace}  />\n                    <div id = \"i\"/>\n\n                </InfoWindow>\n\n                </Map>\n               \n            </div>\n        )\n    }\n}\n\nexport default GoogleApiWrapper ({\n    apiKey: 'AIzaSyCGkLGCv3BgUFVYOfNBk5oBmvH6ou-wU8w'\n})(MapContainer)\n\n"]},"metadata":{},"sourceType":"module"}